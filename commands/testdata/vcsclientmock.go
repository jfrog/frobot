// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jfrog/froggit-go/vcsclient (interfaces: VcsClient)

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vcsclient "github.com/jfrog/froggit-go/vcsclient"
	vcsutils "github.com/jfrog/froggit-go/vcsutils"
)

// MockVcsClient is a mock of VcsClient interface.
type MockVcsClient struct {
	ctrl     *gomock.Controller
	recorder *MockVcsClientMockRecorder
}

// MockVcsClientMockRecorder is the mock recorder for MockVcsClient.
type MockVcsClientMockRecorder struct {
	mock *MockVcsClient
}

// NewMockVcsClient creates a new mock instance.
func NewMockVcsClient(ctrl *gomock.Controller) *MockVcsClient {
	mock := &MockVcsClient{ctrl: ctrl}
	mock.recorder = &MockVcsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVcsClient) EXPECT() *MockVcsClientMockRecorder {
	return m.recorder
}

// AddPullRequestComment mocks base method.
func (m *MockVcsClient) AddPullRequestComment(arg0 context.Context, arg1, arg2, arg3 string, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPullRequestComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPullRequestComment indicates an expected call of AddPullRequestComment.
func (mr *MockVcsClientMockRecorder) AddPullRequestComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPullRequestComment", reflect.TypeOf((*MockVcsClient)(nil).AddPullRequestComment), arg0, arg1, arg2, arg3, arg4)
}

// AddSshKeyToRepository mocks base method.
func (m *MockVcsClient) AddSshKeyToRepository(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 vcsclient.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSshKeyToRepository", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSshKeyToRepository indicates an expected call of AddSshKeyToRepository.
func (mr *MockVcsClientMockRecorder) AddSshKeyToRepository(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSshKeyToRepository", reflect.TypeOf((*MockVcsClient)(nil).AddSshKeyToRepository), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateLabel mocks base method.
func (m *MockVcsClient) CreateLabel(arg0 context.Context, arg1, arg2 string, arg3 vcsclient.LabelInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockVcsClientMockRecorder) CreateLabel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockVcsClient)(nil).CreateLabel), arg0, arg1, arg2, arg3)
}

// CreatePullRequest mocks base method.
func (m *MockVcsClient) CreatePullRequest(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockVcsClientMockRecorder) CreatePullRequest(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockVcsClient)(nil).CreatePullRequest), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// CreateWebhook mocks base method.
func (m *MockVcsClient) CreateWebhook(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 ...vcsutils.WebhookEvent) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWebhook", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *MockVcsClientMockRecorder) CreateWebhook(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockVcsClient)(nil).CreateWebhook), varargs...)
}

// DeleteWebhook mocks base method.
func (m *MockVcsClient) DeleteWebhook(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockVcsClientMockRecorder) DeleteWebhook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockVcsClient)(nil).DeleteWebhook), arg0, arg1, arg2, arg3)
}

// DownloadRepository mocks base method.
func (m *MockVcsClient) DownloadRepository(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadRepository", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadRepository indicates an expected call of DownloadRepository.
func (mr *MockVcsClientMockRecorder) DownloadRepository(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadRepository", reflect.TypeOf((*MockVcsClient)(nil).DownloadRepository), arg0, arg1, arg2, arg3, arg4)
}

// GetCommitBySha mocks base method.
func (m *MockVcsClient) GetCommitBySha(arg0 context.Context, arg1, arg2, arg3 string) (vcsclient.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitBySha", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(vcsclient.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitBySha indicates an expected call of GetCommitBySha.
func (mr *MockVcsClientMockRecorder) GetCommitBySha(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitBySha", reflect.TypeOf((*MockVcsClient)(nil).GetCommitBySha), arg0, arg1, arg2, arg3)
}

// GetLabel mocks base method.
func (m *MockVcsClient) GetLabel(arg0 context.Context, arg1, arg2, arg3 string) (*vcsclient.LabelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*vcsclient.LabelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockVcsClientMockRecorder) GetLabel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockVcsClient)(nil).GetLabel), arg0, arg1, arg2, arg3)
}

// GetLatestCommit mocks base method.
func (m *MockVcsClient) GetLatestCommit(arg0 context.Context, arg1, arg2, arg3 string) (vcsclient.CommitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestCommit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(vcsclient.CommitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestCommit indicates an expected call of GetLatestCommit.
func (mr *MockVcsClientMockRecorder) GetLatestCommit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestCommit", reflect.TypeOf((*MockVcsClient)(nil).GetLatestCommit), arg0, arg1, arg2, arg3)
}

// GetRepositoryInfo mocks base method.
func (m *MockVcsClient) GetRepositoryInfo(arg0 context.Context, arg1, arg2 string) (vcsclient.RepositoryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(vcsclient.RepositoryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryInfo indicates an expected call of GetRepositoryInfo.
func (mr *MockVcsClientMockRecorder) GetRepositoryInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryInfo", reflect.TypeOf((*MockVcsClient)(nil).GetRepositoryInfo), arg0, arg1, arg2)
}

// ListBranches mocks base method.
func (m *MockVcsClient) ListBranches(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockVcsClientMockRecorder) ListBranches(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockVcsClient)(nil).ListBranches), arg0, arg1, arg2)
}

// ListPullRequestLabels mocks base method.
func (m *MockVcsClient) ListPullRequestLabels(arg0 context.Context, arg1, arg2 string, arg3 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestLabels", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestLabels indicates an expected call of ListPullRequestLabels.
func (mr *MockVcsClientMockRecorder) ListPullRequestLabels(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestLabels", reflect.TypeOf((*MockVcsClient)(nil).ListPullRequestLabels), arg0, arg1, arg2, arg3)
}

// ListRepositories mocks base method.
func (m *MockVcsClient) ListRepositories(arg0 context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", arg0)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockVcsClientMockRecorder) ListRepositories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockVcsClient)(nil).ListRepositories), arg0)
}

// SetCommitStatus mocks base method.
func (m *MockVcsClient) SetCommitStatus(arg0 context.Context, arg1 vcsclient.CommitStatus, arg2, arg3, arg4, arg5, arg6, arg7 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommitStatus", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommitStatus indicates an expected call of SetCommitStatus.
func (mr *MockVcsClientMockRecorder) SetCommitStatus(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommitStatus", reflect.TypeOf((*MockVcsClient)(nil).SetCommitStatus), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// TestConnection mocks base method.
func (m *MockVcsClient) TestConnection(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestConnection indicates an expected call of TestConnection.
func (mr *MockVcsClientMockRecorder) TestConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnection", reflect.TypeOf((*MockVcsClient)(nil).TestConnection), arg0)
}

// UnlabelPullRequest mocks base method.
func (m *MockVcsClient) UnlabelPullRequest(arg0 context.Context, arg1, arg2, arg3 string, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlabelPullRequest", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlabelPullRequest indicates an expected call of UnlabelPullRequest.
func (mr *MockVcsClientMockRecorder) UnlabelPullRequest(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlabelPullRequest", reflect.TypeOf((*MockVcsClient)(nil).UnlabelPullRequest), arg0, arg1, arg2, arg3, arg4)
}

// UpdateWebhook mocks base method.
func (m *MockVcsClient) UpdateWebhook(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string, arg7 ...vcsutils.WebhookEvent) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}
	for _, a := range arg7 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWebhook", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWebhook indicates an expected call of UpdateWebhook.
func (mr *MockVcsClientMockRecorder) UpdateWebhook(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}, arg7 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}, arg7...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhook", reflect.TypeOf((*MockVcsClient)(nil).UpdateWebhook), varargs...)
}
